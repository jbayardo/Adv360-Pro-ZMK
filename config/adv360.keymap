
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// Autoshift
#define AS(keycode) &as LS(keycode) keycode

// Autoshift with autoctrl. Single tap is the key, press and hold is shift + key, double press is control + key
#define ASC(keycode) &tdmt_#keycode

// Default behavior for keys
#define XK(keycode) ASC(keycode)

#define XK_DECL(keycode) tdmt_#keycode: tap_dance_mod_tap { \
        compatible = "zmk,behavior-tap-dance"; \
        label = "TAP_DANCE_MOD_TAP"; \
        #binding-cells = <3>; \
        tapping-term-ms = <135>; \
        bindings = <&mt LS(#keycode) #keycode>, <&kp LC(#keycode)>; \
    };

// Tab
// Single tap is tab, held is Alt + Tab
#define XTAB &mt LGUI(TAB) TAB

// Caps Lock.
// Single tap is a cap word, held tap is caps lock
#define XCAPS &mt CAPSLOCK &caps_word

// Arrow 
// Single tap is the action, double tap is action with control
#define ARROW(x) &mt LC(x) x
#define XLEFT  ARROW(UP)
#define XRIGHT ARROW(RIGHT)
#define XUP    ARROW(UP)
#define XDOWN  ARROW(DOWN)

// Backspace
// Single tap is backspace, double tap is Control + Backspace
#define XBSPC &mt LC(BSPC) BSPC
#define XDEL  &mt LC(DEL) DEL

/ {
  behaviors {
    #include "macros.dtsi"

    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <135>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    XK_DECL(EQUAL);
    XK_DECL(N1);
    XK_DECL(N2);
    XK_DECL(N3);
    XK_DECL(N4);
    XK_DECL(N5);
    XK_DECL(N6);
    XK_DECL(N7);
    XK_DECL(N8);
    XK_DECL(N9);
    XK_DECL(N0);
    XK_DECL(MINUS);
    XK_DECL(Q);
    XK_DECL(W);
    XK_DECL(E);
    XK_DECL(R);
    XK_DECL(T);
    XK_DECL(Y);
    XK_DECL(U);
    XK_DECL(I);
    XK_DECL(O);
    XK_DECL(P);
    XK_DECL(BSLH);
    XK_DECL(A);
    XK_DECL(S);
    XK_DECL(D);
    XK_DECL(F);
    XK_DECL(G);
    XK_DECL(H);
    XK_DECL(J);
    XK_DECL(K);
    XK_DECL(L);
    XK_DECL(SEMI);
    XK_DECL(SQT);
    XK_DECL(Z);
    XK_DECL(X);
    XK_DECL(C);
    XK_DECL(V);
    XK_DECL(B);
    XK_DECL(N);
    XK_DECL(M);
    XK_DECL(COMMA);
    XK_DECL(DOT);
    XK_DECL(FSLH);
    XK_DECL(GRAVE);
    XK_DECL(LBKT);
    XK_DECL(RBKT);
  };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
 XK(EQUAL) XK(N1)    XK(N2) XK(N3) XK(N4)  XK(N5) &tog 1                                                                     &mo 3              XK(N6) XK(N7) XK(N8)    XK(N9)   XK(N0)   XK(MINUS)
      XTAB XK(Q)     XK(W)  XK(E)  XK(R)   XK(T)  &none                                                                      &none              XK(Y)  XK(U)  XK(I)     XK(O)    XK(P)    XK(BSLH)
   &kp ESC XK(A)     XK(S)  XK(D)  XK(F)   XK(G)  &macro_unmapped  &kp LCTRL  &kp LALT   &none   &none  &kp LGUI  &kp RCTRL  &macro_ctrl_shift  XK(H)  XK(J)  XK(K)     XK(L)    XK(SEMI) XK(SQT)
 &kp LSHFT XK(Z)     XK(X)  XK(C)  XK(V)   XK(B)  &none            &none      &kp HOME   &none   &none  &kp PG_UP &none      &none              XK(N)  XK(M)  XK(COMMA) XK(DOT)  XK(FSLH) &kp RSHFT
     &mo 2 XK(GRAVE) XCAPS  XLEFT  XRIGHT         XBSPC            XDEL       &kp END                   &kp PG_DN &kp ENTER  &kp SPACE          XUP    XDOWN  XK(LBKT)  XK(RBKT) &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                   &mo 3  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &trans   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none   &none  &trans   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans              &trans        &trans     &kp KP_DOT           &trans  &trans
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none   &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                             &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                                 &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;
        };

    };
};
