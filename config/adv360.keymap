
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// Autoshift
#define AS(keycode) &as LS(keycode) keycode

// Tab
// Single tap is tab, held is Alt + Tab
#define XTAB &mt LGUI(TAB) TAB

// Caps Lock.
// Single tap is a cap word, held tap is caps lock
#define XCAPS &mt CAPSLOCK &caps_word

// Arrow 
// Single tap is the action, double tap is action with control
#define ARROW(x) &mt LC(x) x
#define XLEFT  ARROW(LEFT)
#define XRIGHT ARROW(RIGHT)
#define XUP    ARROW(UP)
#define XDOWN  ARROW(DOWN)

// Backspace
// Single tap is backspace, double tap is Control + Backspace
#define XBSPC &mt LC(BSPC) BSPC
#define XDEL  &mt LC(DEL) DEL

/ {
  behaviors {
    #include "macros.dtsi"

    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <135>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    
    tdmt_EQUAL: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(EQUAL) EQUAL>, <&kp LC(EQUAL)>;
    };
    
    tdmt_N1: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N1) N1>, <&kp LC(N1)>;
    };
    
    tdmt_N2: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N2) N2>, <&kp LC(N2)>;
    };
    
    tdmt_N3: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N3) N3>, <&kp LC(N3)>;
    };
    
    tdmt_N4: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N4) N4>, <&kp LC(N4)>;
    };
    
    tdmt_N5: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N5) N5>, <&kp LC(N5)>;
    };
    
    tdmt_N6: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N6) N6>, <&kp LC(N6)>;
    };
    
    tdmt_N7: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N7) N7>, <&kp LC(N7)>;
    };
    
    tdmt_N8: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N8) N8>, <&kp LC(N8)>;
    };
    
    tdmt_N9: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N9) N9>, <&kp LC(N9)>;
    };
    
    tdmt_N0: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N0) N0>, <&kp LC(N0)>;
    };
    
    tdmt_MINUS: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(MINUS) MINUS>, <&kp LC(MINUS)>;
    };
    
    tdmt_Q: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(Q) Q>, <&kp LC(Q)>;
    };
    
    tdmt_W: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(W) W>, <&kp LC(W)>;
    };
    
    tdmt_E: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(E) E>, <&kp LC(E)>;
    };
    
    tdmt_R: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(R) R>, <&kp LC(R)>;
    };
    
    tdmt_T: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(T) T>, <&kp LC(T)>;
    };
    
    tdmt_Y: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(Y) Y>, <&kp LC(Y)>;
    };
    
    tdmt_U: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(U) U>, <&kp LC(U)>;
    };
    
    tdmt_I: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(I) I>, <&kp LC(I)>;
    };
    
    tdmt_O: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(O) O>, <&kp LC(O)>;
    };
    
    tdmt_P: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(P) P>, <&kp LC(P)>;
    };
    
    tdmt_BSLH: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(BSLH) BSLH>, <&kp LC(BSLH)>;
    };
    
    tdmt_A: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(A) A>, <&kp LC(A)>;
    };
    
    tdmt_S: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(S) S>, <&kp LC(S)>;
    };
    
    tdmt_D: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(D) D>, <&kp LC(D)>;
    };
    
    tdmt_F: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(F) F>, <&kp LC(F)>;
    };
    
    tdmt_G: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(G) G>, <&kp LC(G)>;
    };
    
    tdmt_H: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(H) H>, <&kp LC(H)>;
    };
    
    tdmt_J: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(J) J>, <&kp LC(J)>;
    };
    
    tdmt_K: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(K) K>, <&kp LC(K)>;
    };
    
    tdmt_L: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(L) L>, <&kp LC(L)>;
    };
    
    tdmt_SEMI: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(SEMI) SEMI>, <&kp LC(SEMI)>;
    };
    
    tdmt_SQT: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(SQT) SQT>, <&kp LC(SQT)>;
    };
    
    tdmt_Z: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(Z) Z>, <&kp LC(Z)>;
    };
    
    tdmt_X: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(X) X>, <&kp LC(X)>;
    };
    
    tdmt_C: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(C) C>, <&kp LC(C)>;
    };
    
    tdmt_V: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(V) V>, <&kp LC(V)>;
    };
    
    tdmt_B: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(B) B>, <&kp LC(B)>;
    };
    
    tdmt_N: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(N) N>, <&kp LC(N)>;
    };
    
    tdmt_M: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(M) M>, <&kp LC(M)>;
    };
    
    tdmt_COMMA: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(COMMA) COMMA>, <&kp LC(COMMA)>;
    };
    
    tdmt_DOT: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(DOT) DOT>, <&kp LC(DOT)>;
    };
    
    tdmt_FSLH: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(FSLH) FSLH>, <&kp LC(FSLH)>;
    };
    
    tdmt_GRAVE: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(GRAVE) GRAVE>, <&kp LC(GRAVE)>;
    };
    
    tdmt_LBKT: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(LBKT) LBKT>, <&kp LC(LBKT)>;
    };
    
    tdmt_RBKT: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_MOD_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <135>;
        bindings = <&mt LS(RBKT) RBKT>, <&kp LC(RBKT)>;
    };
  };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
 &tdmt_EQUAL &tdmt_N1    &tdmt_N2 &tdmt_N3 &tdmt_N4  &tdmt_N5 &tog 1                                                                     &mo 3              &tdmt_N6 &tdmt_N7 &tdmt_N8    &tdmt_N9   &tdmt_N0   &tdmt_MINUS
      XTAB &tdmt_Q     &tdmt_W  &tdmt_E  &tdmt_R   &tdmt_T  &none                                                                      &none              &tdmt_Y  &tdmt_U  &tdmt_I     &tdmt_O    &tdmt_P    &tdmt_BSLH
   &kp ESC &tdmt_A     &tdmt_S  &tdmt_D  &tdmt_F   &tdmt_G  &macro_unmapped  &kp LCTRL  &kp LALT   &none   &none  &kp LGUI  &kp RCTRL  &macro_ctrl_shift  &tdmt_H  &tdmt_J  &tdmt_K     &tdmt_L    &tdmt_SEMI &tdmt_SQT
 &kp LSHFT &tdmt_Z     &tdmt_X  &tdmt_C  &tdmt_V   &tdmt_B  &none            &none      &kp HOME   &none   &none  &kp PG_UP &none      &none              &tdmt_N  &tdmt_M  &tdmt_COMMA &tdmt_DOT  &tdmt_FSLH &kp RSHFT
     &mo 2 &tdmt_GRAVE XCAPS  XLEFT  XRIGHT         XBSPC            XDEL       &kp END                   &kp PG_DN &kp ENTER  &kp SPACE          XUP    XDOWN  &tdmt_LBKT  &tdmt_RBKT &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                   &mo 3  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &trans   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none   &none  &trans   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans              &trans        &trans     &kp KP_DOT           &trans  &trans
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none   &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                             &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                                 &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;
        };

    };
};
