
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/dynamic-macros.h>

&sk {
    release-after-ms = <200>;
    quick-release;
};

#define LDF 0 // Default layer
#define LGM 1 // Gaming layer
#define LKP 2 // Keypad layer
#define LFN 3 // Fn layer
#define LMD 4 // MOD layer

// TODO: Homerow mods:
// HJKL para moverse estilo vim https://zmk.dev/docs/behaviors/hold-tap#option-2-tap-preferred
// QWEASDZXC mouse keys??
// S shift
// A alt
// C control
// M mayus
// G gui

// See: https://github.com/WindChimeRan/Adv360-Pro-ZMK/blob/V2.0/config/adv360.keymap

// Letters. Use auto-shift.
#define XL(keycode) &as LS(keycode) keycode

// Modifiers. 
#define XM(keycode) &sk keycode

// Tab. Single tap is tab, held is Alt + Tab
#define XTAB &mt LG(TAB) TAB

// Caps Lock. Single tap is a cap word, held tap is caps lock
#define XCAPS &kp CAPSLOCK

// Arrow. Single tap is the action, double tap is action with control
#define WITH_CTRL(x) &mt LC(x) x
#define WITH_ALT(x) &mt LA(x) x
#define XLEFT  WITH_CTRL(LEFT)
#define XRIGHT WITH_CTRL(RIGHT)
#define XUP    WITH_ALT(UP)
#define XDOWN  WITH_ALT(DOWN)
#define XPG_UP WITH_CTRL(PG_UP)
#define XPG_DN WITH_CTRL(PG_DN)

// Backspace. Single tap is backspace, double tap is Control + Backspace
#define XBSPC WITH_CTRL(BSPC)
#define XDEL  WITH_CTRL(DEL)

// Alt + Control
#define XMOD1 &xdyn

// Hyper
#define XMOD2 &sk LG(LS(LA(LCTRL)))

// Alt + Shift
#define XMOD3 &swapper

// Control + Shift
#define XMOD4 &sk LS(LCTRL)

/ {
    macros {
        dyn: dyn {
            label = "ZM_dynamic-macro";
            compatible = "zmk,behavior-dynamic-macro";
            #binding-cells = <1>;
			no-output; // do not forward keystrokes to the host while recording
			wait-ms = <10>; // disable so that recorded macros play back in the same speed they were recorded at
        };
    };
};

/ {
  behaviors {
    #include "macros.dtsi"

    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    xdyn: xdyn {
        compatible = "zmk,behavior-tap-dance";
        label = "xdyn";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&dyn PLAY>, <&dyn RECORD>;
    };

    swapper: swapper {
        compatible = "zmk,behavior-tri-state";
        label = "SWAPPER";
        #binding-cells = <0>;
        bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
        timeout-ms = <2000>;
    };
  };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
 XL(EQUAL) XL(N1)    XL(N2) XL(N3) XL(N4)  XL(N5) &tog LKP                                                           &mo LMD      XL(N6) XL(N7) XL(N8)    XL(N9)   XL(N0)   XL(MINUS)
      XTAB XL(Q)     XL(W)  XL(E)  XL(R)   XL(T)  XMOD1                                                              XMOD3        XL(Y)  XL(U)  XL(I)     XL(O)    XL(P)    XL(BSLH)
   &kp ESC XL(A)     XL(S)  XL(D)  XL(F)   XL(G)  XMOD2    XM(LCTRL)  XM(LALT)   &none   &none  &kp LGUI  XM(RCTRL)  XMOD4        XL(H)  XL(J)  XL(K)     XL(L)    XL(SEMI) XL(SQT)
 XM(LSHFT) XL(Z)     XL(X)  XL(C)  XL(V)   XL(B)  &none    &none      &kp HOME   &none   &none  XPG_UP    &none      &none        XL(N)  XL(M)  XL(COMMA) XL(DOT)  XL(FSLH) XM(RSHFT)
&mo LFN    XL(GRAVE) XCAPS  XLEFT  XRIGHT         XBSPC    XDEL       &kp END                   XPG_DN    &kp ENTER  &kp SPACE    XUP    XDOWN  XL(LBKT)  XL(RBKT) &mo LFN
            >;
        };

        // Layer with absolutely no modifications. Meant to be used for gaming and/or activities where the changes in the default layer makes things harder
        gaming_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog LKP                                                                       &mo LMD &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &trans                                                                        &trans &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &trans           &kp LCTRL &kp LALT &trans &trans &kp LGUI  &kp RCTRL           &trans &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B         &trans    &trans     &kp HOME &trans &trans &kp PG_UP &trans     &trans           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo LFN     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo LFN
      >;
        };

        layer_keypad {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &mo LMD   &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans     &trans   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans         &trans        &trans     &kp KP_DOT       &trans          &trans
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog LKP                                                &mo LMD   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &m_type_email_pme  &m_type_username_w  &m_type_email_w  &trans  &trans            &trans                                                  &trans     &trans  &m_type_username  &trans   &m_type_email_p2   &m_type_email_p1   &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans   &m_type_last_name   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &m_type_name  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none   &none   &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                             &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                                 &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;
        };

    };
};
